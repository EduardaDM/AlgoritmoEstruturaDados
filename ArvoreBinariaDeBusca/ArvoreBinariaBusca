import java.util.ArrayList;
import java.util.List;

public class ArvoreBinariaBusca<T extends Comparable<T>> extends ArvoreBinaria<T> {

    // Insere um valor na árvore binária de busca
    public void inserir(T valor) {
        raiz = inserir(raiz, valor);
    }
    private NoArvoreBinaria<T> inserir(NoArvoreBinaria<T> no, T valor) {
        if (no == null)
            return new NoArvoreBinaria<>(valor);
        if (valor.compareTo(no.getInfo()) < 0)
            no.setEsquerda(inserir(no.getEsquerda(), valor));
        else
            no.setDireita(inserir(no.getDireita(), valor));
        return no;
    }

    // Remove um valor da árvore mantendo as propriedades da ABB
    public void retirar(T valor) {
        raiz = retirar(raiz, valor);
    }
    private NoArvoreBinaria<T> retirar(NoArvoreBinaria<T> no, T valor) {
        if (no == null)
            return null;

        if (valor.compareTo(no.getInfo()) < 0)
            no.setEsquerda(retirar(no.getEsquerda(), valor));
        else if (valor.compareTo(no.getInfo()) > 0)
            no.setDireita(retirar(no.getDireita(), valor));
        else {
            // nó encontrado

            // Caso 1: nó folha
            if (no.getEsquerda() == null && no.getDireita() == null)
                return null;

            // Caso 2: um filho
            else if (no.getEsquerda() == null)
                return no.getDireita(); // um filho a direita
            else if (no.getDireita() == null)
                return no.getEsquerda(); // um filho a esquerda
            else {
                // Caso 3: dois filhos
                NoArvoreBinaria<T> sucessor = extrairSucessor(no.getDireita());
                no.setInfo(sucessor.getInfo());
                no.setDireita(retirar(no.getDireita(), sucessor.getInfo()));
            }
        }
        return no;
    }

    // Método para extrair o sucessor (menor valor da subárvore direita)
    private NoArvoreBinaria<T> extrairSucessor(NoArvoreBinaria<T> no) {
        NoArvoreBinaria<T> pai = no;
        NoArvoreBinaria<T> atual = no.getDireita();

        while (atual.getEsquerda() != null) {
            pai = atual;
            atual = atual.getEsquerda();
        }
        if (pai == no) {
            pai.setDireita(atual.getDireita());
        } else {
            pai.setEsquerda(atual.getDireita());
        }
        return atual;
    }

    // Gera uma lista com os elementos da árvore em ordem (para ordenações)
    public List<T> toList() {
        List<T> lista = new ArrayList<>();
        emOrdem(raiz, lista);
        return lista;
    }
    private void emOrdem(NoArvoreBinaria<T> no, List<T> lista) {
        if (no != null) {
            emOrdem(no.getEsquerda(), lista);
            lista.add(no.getInfo());
            emOrdem(no.getDireita(), lista);
        }
    }

    // Ordenação: BUBBLE SORT
    public static <T extends Comparable<T>> void bubbleSort(List<T> lista) {
        int n = lista.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - 1 - i; j++) {
                if (lista.get(j).compareTo(lista.get(j + 1)) > 0) {
                    T temp = lista.get(j);
                    lista.set(j, lista.get(j + 1));
                    lista.set(j + 1, temp);
                }
            }
        }
    }

    // Ordenação: MERGE SORT 
    public static <T extends Comparable<T>> void mergeSort(List<T> lista) {
        if (lista.size() > 1) {
            int meio = lista.size() / 2;
            List<T> esquerda = new ArrayList<>(lista.subList(0, meio));
            List<T> direita = new ArrayList<>(lista.subList(meio, lista.size()));
            mergeSort(esquerda);
            mergeSort(direita);
            intercalar(lista, esquerda, direita);
        }
    }

    //INTERCALAR
    private static <T extends Comparable<T>> void intercalar(List<T> lista, List<T> esq, List<T> dir) {
        int i = 0, j = 0, k = 0;
        while (i < esq.size() && j < dir.size()) {
            if (esq.get(i).compareTo(dir.get(j)) <= 0) {
                lista.set(k++, esq.get(i++));
            } else {
                lista.set(k++, dir.get(j++));
            }
        }
        while (i < esq.size())
            lista.set(k++, esq.get(i++));
        while (j < dir.size())
            lista.set(k++, dir.get(j++));
    }

    // Ordenação: QUICK SORT
    public static <T extends Comparable<T>> void quickSort(List<T> lista, int inicio, int fim) {
        if (inicio < fim) {
            int pivoIndex = particionar(lista, inicio, fim);
            quickSort(lista, inicio, pivoIndex - 1);
            quickSort(lista, pivoIndex + 1, fim);
        }
    }

    //PARTICIONAR 
    private static <T extends Comparable<T>> int particionar(List<T> lista, int inicio, int fim) {
        T pivo = lista.get(fim);
        int i = inicio - 1;
        for (int j = inicio; j < fim; j++) {
            if (lista.get(j).compareTo(pivo) <= 0) {
                i++;
                T temp = lista.get(i);
                lista.set(i, lista.get(j));
                lista.set(j, temp);
            }
        }
        T temp = lista.get(i + 1);
        lista.set(i + 1, lista.get(fim));
        lista.set(fim, temp);
        return i + 1;
    }
}
