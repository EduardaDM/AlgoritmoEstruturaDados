import java.util.Objects;

/**
 * Classe que representa uma árvore n-ária genérica com número variável de filhos,
 * utilizando os ponteiros 'primeiro' (primeiro filho) e 'proximo' (próximo irmão).
 *
 * @param <T> tipo dos dados armazenados na árvore
 */
public class Arvore<T> {
    private NoArvore<T> raiz;

    //Construtor padrão. Inicializa a árvore como vazia (sem raiz).
    public Arvore() {
        this.raiz = null;
    }

    public Arvore(NoArvore<T> raiz) {
        this.raiz = raiz;
    }

    public NoArvore<T> getRaiz() {
        return raiz;
    }
    public void setRaiz(NoArvore<T> raiz) {
        this.raiz = raiz;
    }

    //Retorna a representação textual da árvore completa.
    @Override
    public String toString() {
        if (raiz == null) return " ";
        return obterRepresentacaoTextual(raiz);
    }

    //Esse método é público e chama a versão recursiva privada.
    public boolean pertence(T valor) {
        if (raiz == null) return false;
        return pertence(raiz, valor);
    }

    //Percorre a árvore em profundidade a partir de um nó.
    private boolean pertence(NoArvore<T> no, T valor) {
        if (Objects.equals(no.getInfo(), valor)) {
        return true;
    }

        NoArvore<T> p = no.getPrimeiro();
        while (p != null) {
            if (pertence(p, valor)) return true;
            p = p.getProximo();
        }

        return false;
    }

    /**
     * Gera uma representação textual da árvore no formato: 
     * <raiz <filho1> <filho2> ... <filhoN>>
     *
     * @param no nó a ser processado
     * @return representação textual da subárvore
     */
    private String obterRepresentacaoTextual(NoArvore<T> no) {
        StringBuilder s = new StringBuilder();
        s.append("<").append(no.getInfo());

        NoArvore<T> p = no.getPrimeiro();
        while (p != null) {
            s.append(obterRepresentacaoTextual(p));
            p = p.getProximo();
        }

        s.append(">");
        return s.toString();
    } 

    public int contarNos() {
        return contarNos(raiz);
    }

    //Soma 1 para o nó atual e soma a contagem dos filhos.
    private int contarNos(NoArvore<T> no) {
        if (no == null) return 0;

        int total = 1; // conta o próprio nó
        NoArvore<T> p = no.getPrimeiro();
        while (p != null) {
            total += contarNos(p); // soma os filhos
            p = p.getProximo();    // vai para o próximo irmão
        }
        return total;
    }   
}
