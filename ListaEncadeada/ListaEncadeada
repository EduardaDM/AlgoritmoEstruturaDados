public class ListaEncadeada<T> {
    private NoLista<T> primeiro;

    // a) Construtor: define a lista como vazia
    public ListaEncadeada() {
        this.primeiro = null;
    }

    // b) Getter para o primeiro nó
    public NoLista<T> getPrimeiro() {
        return primeiro;
    }

    // c) Insere novo nó no início da lista
    public void inserir(T info) {
        NoLista<T> novo = new NoLista<>();
        novo.setInfo(info);
        novo.setProximo(primeiro);
        primeiro = novo;
    }

    // d) Verifica se está vazia
    public boolean estaVazia() {
        return primeiro == null;
    }

    // e) Busca o nó com info igual
    public NoLista<T> buscar(T info) {
        NoLista<T> atual = primeiro;
        while (atual != null) {
            if (atual.getInfo().equals(info)) {
                return atual;
            }
            atual = atual.getProximo();
        }
        return null;
    }

    // f) Remove o primeiro nó com info igual
    public void retirar(T info) {
        NoLista<T> atual = primeiro;
        NoLista<T> anterior = null;

        while (atual != null) {
            if (atual.getInfo().equals(info)) {
                if (anterior == null) {
                    primeiro = atual.getProximo();
                } else {
                    anterior.setProximo(atual.getProximo());
                }
                return;
            }
            anterior = atual;
            atual = atual.getProximo();
        }
    }

    // g) Retorna o comprimento da lista
    public int obterComprimento() {
        int count = 0;
        NoLista<T> atual = primeiro;
        while (atual != null) {
            count++;
            atual = atual.getProximo();
        }
        return count;
    }

    // h) Retorna o nó de índice idx
    public NoLista<T> obterNo(int idx) {
        int tamanho = obterComprimento();
        if (idx < 0 || idx >= tamanho) {
            throw new IndexOutOfBoundsException("Índice inválido: " + idx);
        }
        NoLista<T> atual = primeiro;
        for (int i = 0; i < idx; i++) {
            atual = atual.getProximo();
        }
        return atual;
    }

    // i) toString: retorna conteúdo separado por vírgula
    public String toString() {
        StringBuilder sb = new StringBuilder();
        NoLista<T> atual = primeiro;
        while (atual != null) {
            sb.append(atual.getInfo());
            if (atual.getProximo() != null) {
                sb.append(",");
            }
            atual = atual.getProximo();
        }
        return sb.toString();
    }
}
